var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = VariableFrequencyOPF","category":"page"},{"location":"#VariableFrequencyOPF.jl","page":"Home","title":"VariableFrequencyOPF.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AC optimal power flow for networks with multiple frequencies, with each frequency as an optimization variable.","category":"page"},{"location":"","page":"Home","title":"Home","text":"One main goal of this package is a flexible and extensible implementation which can fully accommodate the multiple and variable frequency OPF formulation with power flow control between frequency areas. This package allows additional modifications to the constraints and objective function as the analysis develops.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Another goal is a smooth extension of existing data formats to the case of multiple and variable frequencies. To this end, it is important that the software can import industry standard steady state network modeling formats with the minimum necessary additional specification of the parameters which are new to this framework.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Add this package with the following command in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add git@github.com:WISPO-POP/VariableFrequencyOPF.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"or","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/WISPO-POP/VariableFrequencyOPF.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"Load the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using VariableFrequencyOPF","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also run the package tests:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] test VariableFrequencyOPF","category":"page"},{"location":"#Parsing-Network-Data","page":"Home","title":"Parsing Network Data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Flowchart for parsing)","category":"page"},{"location":"#Input-data","page":"Home","title":"Input data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each frequency area, or subnetwork, is described by a network data file in a standard format, including PSS&reg;E .raw files, Matpower .m files, or PowerModels dictionaries saved in formats such as .json.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The file subnetworks.csv contains the names of the network data files for each subnetwork, in the order in which they are to be parsed, and the subnetwork-wide frequency parameters, including a boolean specification of whether the frequency is variable, the base frequency at which the impedance parameters in the network file are defined, and the range of allowed frequencies. An example subnetworks.csv is shown here:","category":"page"},{"location":"","page":"Home","title":"Home","text":"index file variable_f f_base f_min f_max\n1 base_subnet.raw false 60 60 60\n2 lfac_subnet.raw true 60 10 50","category":"page"},{"location":"","page":"Home","title":"Home","text":"The file interfaces.csv specifies all the connections between different subnetworks. Each interface is given a unique integer index, and each row in the file which has this interface index specifies a connection to the interface. The rows specify the subnetwork and bus, along with any additional parameters, including the maximum apparent power in per unit. An example interfaces.csv file is shown below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"index subnet_index bus s_max\n1 1 1011 10.0\n2 1 1013 10.0\n1 2 1 10.0\n2 2 2 10.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"This example shows two interfaces. The first connects bus 1011 in subnetwork 1 to bus 1 in subnetwork 2, and the second connects bus 1013 in subnetwork 1 to bus 2 in subnetwork 2. The apparent power limit at each interface connection is 10.0 p.u.","category":"page"},{"location":"#Modeling-and-Solving-the-OPF","page":"Home","title":"Modeling and Solving the OPF","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Flowchart for OPF)","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Solve-the-OPF-for-a-network-with-a-variable-frequency-(low-frequency-AC)-portion","page":"Home","title":"Solve the OPF for a network with a variable frequency (low frequency AC) portion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Consider a power system which is divided into two areas connected by AC-AC converters: one operates at a fixed frequency of 60 Hz, and the other is a multi-terminal low frequency AC network, whose frequency can be chosen. In the directory test/data/case14_twoarea is data for a modified IEEE 14 bus network which fits this paradigm, as drawn here, with the variable frequency portion in blue: (Image: 14 bus network with LFAC)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this example, we solve the OPF for this case, and we print the termination status, generation cost and optimal frequencies (The frequency of the standard part of the network is fixed at 60 Hz, and the frequency of the other part is allowed to vary between 1.0 and 100.0 Hz).","category":"page"},{"location":"","page":"Home","title":"Home","text":"using VariableFrequencyOPF\n\nnetwork = \"test/data/case14_twoarea/two_area/\"\nobjective = \"mincost\"\nsolution = VariableFrequencyOPF.multifrequency_opf(network, objective)\n\nresults_dict = solution[1]\nprintln(\"Status:\")\nprintln(results_dict[\"status\"])\nprintln(\"\\nCost:\\n==============================\")\nprintln(\"Variable frequency subnetwork:\")\nprintln(results_dict[\"cost\"][1])\nprintln(\"Fixed frequency subnetwork:\")\nprintln(results_dict[\"cost\"][2])\nprintln(\"\\nFrequency:\\n==============================\")\nprintln(\"Variable frequency subnetwork:\")\nprintln(results_dict[\"frequency (Hz)\"][1])\nprintln(\"Fixed frequency subnetwork:\")\nprintln(results_dict[\"frequency (Hz)\"][2])","category":"page"},{"location":"","page":"Home","title":"Home","text":"output:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Status:\nLOCALLY_SOLVED\n\nCost:\n==============================\nVariable frequency subnetwork:\n7565.237470495639\nFixed frequency subnetwork:\n553.6125608844086\n\nFrequency:\n==============================\nVariable frequency subnetwork:\n1.0\nFixed frequency subnetwork:\n60.0","category":"page"},{"location":"#Solve-the-OPF-for-a-set-of-upgrades","page":"Home","title":"Solve the OPF for a set of upgrades","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We want to define a set of upgrades in the Nordic system, each consisting of a single point-to-point upgrade. We use the function enumerate_branches to create the network data for each upgraded case. This generates a folder of network data for the single network file base_network with one line converted to LFAC, once for each index in indices, or if indices is empty, for every non-transformer branch in the network. Once we have created the data for each of these upgrades, we can call run_series to solve the OPF for each upgrade.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using VariableFrequencyOPF\n\noriginal_network = \"test/data/nordic_fault/base/fault_4032_4044.m\"\n# We choose to put the new network data in the same folder because\n# we also want to use some data that is already there. Each upgrade\n# gets its own folder.\nnew_data_directory = \"test/data/nordic_fault/\"\nstandard_frequency = 50.0\nlfac_branch_upgrades = [21,27,28,29,30,31,32,33]\n\nVariableFrequencyOPF.upgrade_branches(\n    original_network,\n    new_data_directory,\n    standard_frequency,\n    indices=lfac_branch_upgrades\n)\n\n# Minimize generation in areas 2 and 3 with plots including\n# the power flow between areas 1 and 2\nobjective = \"areagen\"\ngen_areas = [2,3]\narea_transfer = [1,2]\n# We want to plot the results of all branch upgrades,\n# so we set `enum_branch` to true\nenum_branches = true\n\nsolution =  VariableFrequencyOPF.run_series(\n    new_data_directory,\n    objective;\n    gen_areas=gen_areas,\n    area_transfer=area_transfer,\n    enum_branches=enum_branches\n)\nresults_dict = solution[1]\nn_subnets = solution[2]\nsubnet_array = solution[3]\nidx_sorted = solution[4]\nseries_output_folder = solution[5]\nplot_best_x = solution[6]\n\nprintln(\"Ran the OPF for all folders and saved the outputs in $series_output_folder.\")\n\n# Now we generate plots showing the results across all the upgrades.\n# We could plot multiple series (e.g. with different operating conditions,\n# converter parameters, etc.) on the same x axis by adding them\n# to the following array. Here we only plot one.\nresults_dict_allplots = [results_dict]\n\nplot_output_folder = \"results/nordic_fault/\"\nseries_labels = [\"LFAC upgrades\"]\n\nVariableFrequencyOPF.plot_results_dicts_bar(\n    results_dict_allplots,\n    n_subnets,\n    subnet_array,\n    idx_sorted,\n    plot_output_folder,\n    plot_best_x,\n    series_labels,\n    color_palette=:Dark2_8\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The function run_series solves the OPF for each upgrade and generates results in .csv files. The next function, plot_results_dicts_bar, generates and saves plots of certain variables. For example, we can look at the plot of the objective value, total generation in areas 2 and 3 (p.u.): (Image: total generation in areas 2 and 3 (p.u.))","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [VariableFrequencyOPF]","category":"page"},{"location":"#VariableFrequencyOPF.frequency_ranges-Tuple{Any,Any,Int64,String,String,Array,Array}","page":"Home","title":"VariableFrequencyOPF.frequency_ranges","text":"function frequency_ranges(\n    f_min,\n    f_max,\n    subnet::Int64,\n    directory::String,\n    objective::String,\n    x_axis::Array,\n    y_axis::Array;\n    gen_areas=Int64[],\n    area_transfer=Int64[],\n    gen_zones=[],\n    zone_transfer=[],\n    plot_vert_line::Tuple=([],\"\"),\n    plot_horiz_line::Tuple=([],\"\"),\n    xlimits::Array{Any,1}=[],\n    ylimits::Array{Any,1}=[],\n    output_plot_label::Tuple{String,String}=(\"\",\"\"),\n    scopf::Bool=false,\n    contingency::Tuple=(0,),\n    k_cond=[],\n    k_ins=[],\n    scale_load=1.0,\n    scale_areas=Int64[],\n    no_converter_loss=false\n)\n\nModels and solves an OPF with frequency in specified ranges between f_min and f_max.\n\nArguments\n\nf_min: lower bounds on frequency, one for each point in the frequency sweep\nf_max: upper bounds on frequency, one for each point in the frequency sweep. Must have the same length as f_min.\nsubnet::Int64: subnetwork for which the frequency bounds are applied\ndirectory::String: the directory containing all subnetwork data, subnetworks.csv, and interfaces.csv\nobjective::String: the objective function to use, from the following:\n\"mincost\": minimize generation cost\n\"areagen\": minimize generation in the areas specified in gen_areas\n\"zonegen\": minimize generation in the zones specified in gen_zones\n\"minredispatch\": minimize the change in generator dispatch from the initial values defined in the network data\nx_axis::Array: Array of Tuples identifying the x axis series for which plots should be generated over the points in the frequency sweep. A separate folder of plots is generated for each Tuple in the array. The series can be specified in the Tuple in one of three ways:\nresults dictionary values: A two-element Tuple, where the first element is a String matching a key in the results dictionary output from multifrequency_opf and the second element is an Int specifying a subnetwork. This plots the values of this key and subnetwork entry on the x axis.\nnetwork data values: A Tuple with elements corresponding to keys at each level of the network data dictionary, identifying any network variable value. This plots the values of the specified network variable on the x axis. Any key in the Tuple may be an Array, in which case a separate plot is generated for each key. For example, to generate four plots, the active and reactive power at the origin (\"f\") bus and destination (\"t\") bus for branch 1 in subnetwork 2, use the Tuple (\"sn\",2,\"branch\",1,[\"pt\",\"pf\",\"qt\",\"qf\"])\ncustom values: A two-element Tuple, where the first element is a String not matching any keys in the results dictionary and the second element is an Array. This plots the values in the Array on the x axis with the label in the String.\ny_axis::Array: Array of Tuples identifying the y axis series for which plots should be generated over the points in the frequency sweep. A separate folder of plots is generated for each Tuple in the array. These are specified in the same way as x_axis.\ngen_areas: all areas in which generation should be minimized if obj==\"areagen\"\narea_transfer: two areas with power transfer between them that should be saved and plotted. Results for P, Q, S, and loss are saved for power transfer between the two areas. Must have exactly two elements.\ngen_zones: all zones in which generation should be minimized if obj==\"zonegen\"\nzone_transfer: two zones with power transfer between them that should be saved and plotted. Results for P, Q, S, and loss are saved for power transfer between the two zones. Must have exactly two elements.\nplot_vert_line::Tuple: x values of vertical lines to overlay on the plot. The first element is a scalar or Array specifying one or more x values to plot, and the second element is a String or Array of Strings specifying the label or labels. Default ([],\"\") does not add any lines to the plot.\nplot_horiz_line::Tuple: y values of horizontal lines to overlay on the plot. The first element is a scalar or Array specifying one or more y values to plot, and the second element is a String or Array of Strings specifying the label or labels. Default ([],\"\") does not add any lines to the plot.\nxlimits::Array{Any,1}: Array of two values specifying the min and max x axis limits to apply to the plots, overriding any other limits. Default [] does not change the plot.\nylimits::Array{Any,1}: Array of two values specifying the min and max y axis limits to apply to the plots, overriding any other limits. Default [] does not change the plot.\noutput_plot_label::Tuple{String,String}: specifies the plot to pass to the output. The first element must match the x axis label, and the second must match the y axis label.\nscopf::Bool: if true, model and solve the N-1 security constrained OPF for each network. Each network folder must contain a contingency specification file (*.con) for each subnetwork. Default false.\ncontingency::Tuple: indices of the contingency to plot. The precontingency index is (0,). Default (0,).\nk_cond: conductor utilization parameter for HVDC. Only used when f==0. Default [].\nk_ins: insulation factor parameter for HVDC. Only used when f==0. Default [].\nscale_load: factor for scaling the load in the frequency sweep. Default 1.0.\nscale_areas: array of integer area indices for which the load scaling factor scale_load should be applied. Applies to all areas if this array is empty. Default Int64[].\nno_converter_loss: override all converter loss parameters specified in the data and replace them with the the lossless converter model.\n\n\n\n\n\n","category":"method"},{"location":"#VariableFrequencyOPF.make_mn_data-Tuple{Any,Any,Dict{String,Any}}","page":"Home","title":"VariableFrequencyOPF.make_mn_data","text":"function make_mn_data(\n    subnetworks,\n    interfaces,\n    networks::Dict{String,Any}\n)\n\nBuilds the mn_data dictionary from the specifications of the subnetworks and interfaces DataFrames and the network data in the networks Dict.\n\nArguments\n\nsubnetworks: a DataFrame in the format of subnetworks.csv, and interfaces.csv\ninterfaces: a DataFrame in the format of interfaces.csv\nnetworks::Dict{String,Any}: a Dict of all subnetworks, as PowerModels networks\n\n\n\n\n\n","category":"method"},{"location":"#VariableFrequencyOPF.multifrequency_opf-Tuple{String,String}","page":"Home","title":"VariableFrequencyOPF.multifrequency_opf","text":"multifrequency_opf(\n    folder::String,\n    obj::String;\n    gen_areas=[],\n    area_interface=[],\n    gen_zones=[],\n    zone_interface=[],\n    print_results::Bool=false,\n    override_param::Dict{Any}=Dict(),\n    fix_f_override::Bool=false,\n    direct_pq::Bool=true,\n    master_subnet::Int64=1,\n    suffix::String=\"\",\n    start_vals=Dict{String, Dict}(\"sn\"=>Dict()),\n    no_converter_loss::Bool=false,\n    uniform_gen_scaling::Bool=false,\n    unbounded_pg::Bool=false\n)\n\nModels and solves the OPF for a single network with data contained in folder.\n\nArguments\n\nfolder::String: the directory containing all subnetwork data, subnetworks.csv, and interfaces.csv\nobj::String: the objective function to use, from the following:\n\"mincost\": minimize generation cost\n\"areagen\": minimize generation in the areas specified in gen_areas\n\"zonegen\": minimize generation in the zones specified in gen_zones\n\"minredispatch\": minimize the change in generator dispatch from the initial values defined in the network data\ngen_areas: integer array of all areas in which generation should be minimized if obj==\"areagen\"\narea_interface: two areas with power transfer between them that should be saved and plotted. Results for P, Q, S, and loss are saved for power transfer between the two areas. Must have exactly two elements.\ngen_zones: integer array of all zones in which generation should be minimized if obj==\"zonegen\"\nzone_interface: two zones with power transfer between them that should be saved and plotted. Results for P, Q, S, and loss are saved for power transfer between the two zones. Must have exactly two elements.\nprint_results::Bool: if true, print the DataFrames containing the output values for buses, branches, generators, and interfaces. These values are always saved to the output .csv files whether true or false.\noverride_param::Dict{Any}: values to override in the network data defined in folder. Must follow the same structure as the full network data dictionary, beginning with key \"sn\". Default empty Dict.\nfix_f_override::Bool: if true, fix the frequency in every subnetwork to the base value, overriding the variable_f parameter to variable_f=false for every subnetwork. Default false.\ndirect_pq::Bool: If direct_pq is false, then the interface is treated as a single node and power flow respects Kirchoff Laws, by constraining the voltage magnitude and angle on each side to be equal and enforcing reactive power balance. Default true.\nmaster_subnet::Int64: if direct_pq==false, the angle reference must be defined for exactly one subnetwork, since the other subnetwork angles are coupled through the interfaces. Value of master_subnet defines which subnetwork provides this reference. Default 1.\nsuffix::String: suffix to add to the output directory when saving results. Default empty string.\nstart_vals: Nested dictionary populated with values to be used as a starting point in the optimization model. Applies to bus vm and va, gen pg and qg, branch pt, pf, qt and qf and subnet f. Any of these values which are present in the dictionary will be applied; other values will be ignored. A full network data dictionary can be used. Default Dict{String, Dict}(\"sn\"=>Dict()).\n\n\n\n\n\n","category":"method"},{"location":"#VariableFrequencyOPF.read_sn_data-Tuple{String}","page":"Home","title":"VariableFrequencyOPF.read_sn_data","text":"read_sn_data(folder::String)\n\nReads a network folder and builds the mn_data dictionary.\n\nArguments\n\nfolder::String: the path to the folder containing all the network data\n\n\n\n\n\n","category":"method"},{"location":"#VariableFrequencyOPF.run_subnets-Tuple{String,String}","page":"Home","title":"VariableFrequencyOPF.run_subnets","text":"runsubnets(       parentfolder::String,       objective::String;       genareas::Array=[],       areatransfer::Array=[],       genzones::Array=[],       zonetransfer::Array=[],       enumbranches::Bool=false,       plotbestx::Int64=-1,       scopf::Bool=false,       ctgplots::Array{Int64,1}=[0],       runfixf::Bool=false,       runindirPQ::Bool=false,       print_results::Bool=false    )\n\nModels and solves an OPF for every network in a directory.\n\nArguments\n\nparent_folder::String: a directory containing full network data for one or more networks, each in a folder containing all subnetwork data, subnetworks.csv, and interfaces.csv\nobj::String: the objective function to use, from the following:\n\"mincost\": minimize generation cost\n\"areagen\": minimize generation in the areas specified in gen_areas\n\"zonegen\": minimize generation in the zones specified in gen_zones\n\"minredispatch\": minimize the change in generator dispatch from the initial values defined in the network data\ngen_areas::Array{Int64,1}: all areas in which generation should be minimized if obj==\"areagen\"\narea_transfer::Array{Int64,1}: two areas with power transfer between them that should be saved and plotted. Results for P, Q, S, and loss are saved for power transfer between the two areas. Must have exactly two elements.\ngen_zones::Array{Int64,1}: all zones in which generation should be minimized if obj==\"zonegen\"\nzone_transfer::Array{Int64,1}: two zones with power transfer between them that should be saved and plotted. Results for P, Q, S, and loss are saved for power transfer between the two zones. Must have exactly two elements.\nenum_branches::Bool: if true, collect results from each folder for plotting bar graphs. This is used when the possible branch upgrades have been enumerated and a comparison is desired. Default false.\nplot_best_x::Int64: number of results to plot, sorted from smallest to largest objective. If plot_best_x <= 1, the results of all networks which gave feasible solutions are plotted. Default -1.\nscopf::Bool: if true, model and solve the N-1 security constrained OPF for each network. Each network folder must contain a contingency specification file (*.con) for each subnetwork. Default false.\nctg_plots::Array{Int64,1}: indices of the contingencies to plot. The base case index is 0. Default [0].\n\n\n\n\n\n","category":"method"},{"location":"#VariableFrequencyOPF.upgrade_branches-Tuple{String,String,Any}","page":"Home","title":"VariableFrequencyOPF.upgrade_branches","text":"function upgrade_branches(\n   base_network::String,\n   output_location::String,\n   fbase;\n   indices=[],\n   output_type=\"input\"\n   )\n\nCreates a folder of network data for the network base_network with one line converted to LFAC, one for each index in indices, or if indices is empty, for every non-transformer branch in the network.\n\n\n\n\n\n","category":"method"}]
}
